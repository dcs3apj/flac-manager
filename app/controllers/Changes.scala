/*
 * Copyright 2014 Alex Jones
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package controllers

import java.nio.file.{Path, Paths}
import javax.inject.{Inject, Singleton}

import common.changes.ChangeDao
import common.configuration.{User, UserDao}
import common.joda.JodaDateTime
import org.joda.time.DateTime
import play.api.libs.json.{JsObject, JsValue, Json}
import play.api.mvc._

/**
  * A controller that provides information on what has changed in repositories.
  * @param userDao The [[UserDao]] used to get users from their usernames.
  * @param changeDao The [[ChangeDao]] used to get changes.
  */
@Singleton
class Changes @Inject()(val userDao: UserDao, val changeDao: ChangeDao) extends Controller {

  /**
    * A helper method that will return either a JSON response or a 404 if a user is not find.
    * @param username The name of the user to look for.
    * @param sinceStr The date to search from in ISO8601 format.
    * @param jsonBuilder A function that takes a user and a parsed date and returns a JSON value.
    * @return An action containing the JSON generated by the `jsonBuilder` or a 404 if the user could not be
    *         found or the date not parsed.
    */
  def since(
             username: String, 
             sinceStr: String)(
    jsonBuilder: RequestHeader => User => DateTime => JsValue) = Action { implicit request =>
    val parameters = for {
      user <- userDao.allUsers().find(_.name == username)
      since <- JodaDateTime(sinceStr)
    } yield (user, since)
    parameters match {
      case Some((user, since)) =>
        Ok(jsonBuilder(request)(user)(since))
      case _ => NotFound
    }
  }

  /**
    * List all the changes for a user since a given date and time.
    * @param username The name of the user.
    * @param sinceStr The since string in ISO8601 format.
    * @return A list of all the changes for the user since the given date or 404 if either is not valid.
    */
  def changes(username: String, sinceStr: String): Action[AnyContent] = since(username, sinceStr) { implicit request => {
    user => since =>
      val changes = changeDao.getAllChangesSince(user, since)
      val jsonChanges = changes.map { change =>
        val changeObj = Json.obj(
          "action" -> change.action,
          "relativePath" -> change.relativePath,
          "at" -> JodaDateTime.format(change.at)
        )
        if (change.action == "added") {
          changeObj ++ links(username, change.relativePath)
        }
        else {
          changeObj
        }
      }.distinct
      Json.obj("changes" -> jsonChanges)
    }
  }

  /**
    * Generate the links for a change or changelog that allow a client to download either music, tags or artwork.
    * @param user The user who whom the change is for.
    * @param relativePath The relative path of the music file for which the music will be downloaded.
    * @param request The request from the server.
    * @return A JSON object containing the music, tags and artwork links.
    */
  def links(user: String, relativePath: String)(implicit request: RequestHeader): JsObject = {
    def url(callBuilder: (String, String) => Call, path: Path): String =
      callBuilder(user, path.toString).absoluteURL().replace(' ', '+')

    val path = Paths.get(relativePath)
    Json.obj(
      "_links" -> Json.obj(
        "music" -> url(routes.Music.music, path),
        "tags" -> url(routes.Music.tags, path),
        "artwork" -> url(routes.Music.artwork, path.getParent)
      )
    )
  }

  /**
    * List all the changelog for a user since a given date and time.
    * @param username The name of the user.
    * @param sinceStr The since string in ISO8601 format.
    * @return A list of all the changes for the user since the given date or 404 if either is not valid.
    */
  def changelog(username: String, sinceStr: String): Action[AnyContent] = since(username, sinceStr) { implicit request => {
    user => since =>
      val changelogCount = changeDao.countChangelog(user)
      val changelog = changeDao.changelog(user, since)
      Json.obj(
        "total" -> changelogCount,
        "changelog" -> changelog.map { changelogItem =>
          Json.obj(
            "parentRelativePath" -> changelogItem.parentRelativePath,
            "at" -> JodaDateTime.format(changelogItem.at),
            "relativePath" -> changelogItem.relativePath
          ) ++ links(username, changelogItem.relativePath)
        }
      )
    }
  }
}